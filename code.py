# -*- coding: utf-8 -*-
"""code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rdQU003SnlwqquWNyNRKqgnFztrUgWoc
"""

#pressure random walk & exp regression for windspeeed

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from statsmodels.graphics.tsaplots import plot_acf


#the stuff importing for the data
from google.colab import drive
drive.mount('/content/gdrive')

Whole_df_event1 = pd.read_csv("gdrive/My Drive/event_1.csv")
Whole_df_event2 = pd.read_csv("gdrive/My Drive/event_2.csv")
Whole_df_event3 = pd.read_csv("gdrive/My Drive/event_3.csv")
Whole_df_event4 = pd.read_csv("gdrive/My Drive/event_4.csv")
Whole_df_event5 = pd.read_csv("gdrive/My Drive/event_5.csv")
Whole_df_event6 = pd.read_csv("gdrive/My Drive/event_6.csv")
Whole_df_event7 = pd.read_csv("gdrive/My Drive/event_7.csv")
Whole_df_event8 = pd.read_csv("gdrive/My Drive/event_8.csv")
Whole_df_event9 = pd.read_csv("gdrive/My Drive/event_9.csv")
Whole_df_event10 = pd.read_csv("gdrive/My Drive/event_10.csv")

df_event1 = Whole_df_event1.pressure
df_event2 = Whole_df_event2.pressure
df_event3 = Whole_df_event3.pressure

df_event4 = Whole_df_event4.pressure
df_event5 = Whole_df_event5.pressure
df_event6 = Whole_df_event6.pressure

df_event7 = Whole_df_event7.pressure
df_event8 = Whole_df_event8.pressure
df_event9 = Whole_df_event9.pressure
df_event10 = Whole_df_event10.pressure


#test_forecast_rw = df_event1.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_1 = df_event1.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_2 = df_event2.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_3 = df_event3.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_4 = df_event4.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_5 = df_event5.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_6 = df_event6.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_7 = df_event7.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_8 = df_event8.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_9 = df_event9.shift(1)[1:]  # Shift and remove NaN for the test set
pforecast_rw_10 = df_event10.shift(1)[1:]  # Shift and remove NaN for the test set


WindSpeedPrediction = []
def WindPredictor(x):
    return (2.0609**(-4.0134*x))+0.08
vfunc = np.vectorize(WindPredictor)
WindSpeedPrediction1 = vfunc(pforecast_rw_1)
WindSpeedPrediction2 = vfunc(pforecast_rw_2)
WindSpeedPrediction3 = vfunc(pforecast_rw_3)
WindSpeedPrediction4 = vfunc(pforecast_rw_4)
WindSpeedPrediction5 = vfunc(pforecast_rw_5)
WindSpeedPrediction6 = vfunc(pforecast_rw_6)
WindSpeedPrediction7 = vfunc(pforecast_rw_7)
WindSpeedPrediction8 = vfunc(pforecast_rw_8)
WindSpeedPrediction9 = vfunc(pforecast_rw_9)
WindSpeedPrediction10 = vfunc(pforecast_rw_10)
#MSE = mean_squared_error(WindSpeedPrediction, filtered_df['windspeed'][1:])
#print("Mean Squared Error:", MSE)
WindSpeedPrediction

import matplotlib.pyplot as plt

# Create a NumPy array for the line graph data
x1 = Whole_df_event1.hour[1:].to_numpy()

x2 = Whole_df_event2.hour[1:].to_numpy()

x3 = Whole_df_event3.hour[1:].to_numpy()

x4 = Whole_df_event4.hour[1:].to_numpy()

x5 = Whole_df_event5.hour[1:].to_numpy()

x6 = Whole_df_event6.hour[1:].to_numpy()

x7 = Whole_df_event7.hour[1:].to_numpy()

x8 = Whole_df_event8.hour[1:].to_numpy()

x9 = Whole_df_event9.hour[1:].to_numpy()

x10 = Whole_df_event10.hour[1:].to_numpy()

#y = WindSpeedPrediction  # Example data: sine wave

# Plot the line graph using the NumPy array
plt.figure(figsize=(10, 6))
plt.subplot(3, 4, 1)  # 2 rows, 1 column, first plot
plt.plot(x1, WindSpeedPrediction1, label='Predicted Windspeed, Event 1')
#plt.plot(x1, Whole_df_event1['windspeed'][1:])
plt.title('Predicted Windspeed, #1')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')
plt.legend()
plt.grid(True)

plt.subplot(3, 4, 2)  # 2 rows, 1 column, first plot
plt.plot(x2, WindSpeedPrediction2, label='Predicted Windspeed, Event 2')
plt.title('Predicted Windspeed, #2')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')
#plt.legend()


plt.subplot(3, 4, 3)  # 2 rows, 1 column, first plot
plt.plot(x3, WindSpeedPrediction3, label='Predicted Windspeed, Event 3')
plt.title('Predicted Windspeed, #3')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')
#plt.legend()


plt.subplot(3, 4, 4)  # 2 rows, 1 column, first plot
plt.plot(x4, WindSpeedPrediction4, label='Predicted Windspeed, Event 4')
plt.title('Predicted Windspeed, #4')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')
#plt.legend()


plt.subplot(3, 4, 5)  # 2 rows, 1 column, first plot
plt.plot(x5, WindSpeedPrediction5, label='Predicted Windspeed, Event 5')
plt.title('Predicted Windspeed, #5')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')
#plt.legend()

plt.subplot(3, 4, 6)  # 2 rows, 1 column, first plot
plt.plot(x6, WindSpeedPrediction6, label='Predicted Windspeed, Event 6')
plt.title('Predicted Windspeed, #6')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')


plt.subplot(3, 4, 7)  # 2 rows, 1 column, first plot
plt.plot(x7, WindSpeedPrediction7, label='Predicted Windspeed, Event 7')
plt.title('Predicted Windspeed, #7')
plt.xlabel('time')
plt.ylabel('Windspeed')


plt.subplot(3, 4, 8)  # 2 rows, 1 column, first plot
plt.plot(x8, WindSpeedPrediction8, label='Predicted Windspeed, Event 8')
plt.title('Predicted Windspeed, #8')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')


plt.subplot(3, 4, 9)  # 2 rows, 1 column, first plot
plt.plot(x9, WindSpeedPrediction9, label='Predicted Windspeed, Event 9')
plt.title('Predicted Windspeed, #9')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')
#plt.legend()


plt.subplot(3, 4, 10)  # 2 rows, 1 column, first plot
plt.plot(x10, WindSpeedPrediction10, label='Predicted Windspeed, Event 10')
plt.xlabel('hours since model start')
plt.ylabel('Windspeed')
plt.title('Predicted Windspeed, #10')

plt.grid(True)
plt.tight_layout()
plt.show()

def Profit(wind_speed):
  if(wind_speed >= 0.4):
    price = 250 + 0.0095*np.exp(16*wind_speed)
  else:
    price = 250 + 0.132*np.exp(10.27*wind_speed)
  return price
print("Price, E1: "+str(Profit(np.max(WindSpeedPrediction1))))
print("Price, E2: "+str(Profit(np.max(WindSpeedPrediction2))))
print("Price, E3: "+str(Profit(np.max(WindSpeedPrediction3))))
print("Price, E4: "+str(Profit(np.max(WindSpeedPrediction4))))
print("Price, E5: "+str(Profit(np.max(WindSpeedPrediction5))))
print("Price, E6: "+str(Profit(np.max(WindSpeedPrediction6))))
print("Price, E7: "+str(Profit(np.max(WindSpeedPrediction7))))
print("Price, E8: "+str(Profit(np.max(WindSpeedPrediction8))))
print("Price, E9: "+str(Profit(np.max(WindSpeedPrediction9))))
print("Price, E10: "+str(Profit(np.max(WindSpeedPrediction10))))

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_absolute_error, mean_squared_error
import os

# Load model_data_2.csv for training the SARIMA model
df3 = pd.read_csv("gdrive/My Drive/model_data_2.csv")
columns_to_keep = [
    'pressure_GANopolis',
    'windspeed_GANopolis',
    'windspeed_ReLU Ridge',
    'windspeed_Gradient Grove'
]
df3 = df3[columns_to_keep]

# Extract the windspeed series for GANopolis and drop NaN values
windspeed_series = df3['windspeed_GANopolis'].dropna()

# Split the data into training (70%) and testing (30%)
train_size = int(len(windspeed_series) * 0.7)
train_data, test_data = windspeed_series[:train_size], windspeed_series[train_size:]

# Fit the SARIMA model
sarima_model = SARIMAX(train_data, order=(2, 1, 3), seasonal_order=(1, 1, 1, 24))
fitted_model = sarima_model.fit(disp=False)

# Evaluate SARIMA on the test data
forecast_steps = len(test_data)
forecast = fitted_model.get_forecast(steps=forecast_steps)
forecast_values = forecast.predicted_mean

# Print evaluation metrics for SARIMA
mse = mean_squared_error(test_data, forecast_values)
rmse = np.sqrt(mse)
print(f"SARIMA Model MSE: {mse}")
print(f"SARIMA Model RMSE: {rmse}")

# Load event data for forecasting
event_files = ['gdrive/My Drive/event_1.csv','gdrive/My Drive/event_2.csv', 'gdrive/My Drive/event_3.csv','gdrive/My Drive/event_4.csv','gdrive/My Drive/event_5.csv','gdrive/My Drive/event_6.csv']  # Include all event files here

# Function to generate forecasts using SARIMA for each event
def generate_forecasts_sarima(event_data):
    # Filter data for GANopolis
    ganopolis_data = event_data[event_data['city'] == 'GANopolis']

    # Extract windspeed series for GANopolis and drop NaN values
    windspeed_series_event = ganopolis_data['windspeed'].dropna()

    # Fit SARIMA model on the event's data (use all available data for training)
    sarima_event_model = SARIMAX(windspeed_series_event, order=(2, 1, 3), seasonal_order=(1, 1, 1, 24))
    fitted_event_model = sarima_event_model.fit(disp=False)

    # Forecast next 5 days (120 hours assuming hourly data)
    forecast_steps = 120
    forecast_event = fitted_event_model.get_forecast(steps=forecast_steps)
    forecast_values_event = forecast_event.predicted_mean

    # Create output dataset with hour and day information
    last_hour = ganopolis_data['hour'].iloc[-1]
    last_day = ganopolis_data['day'].iloc[-1]

    forecast_hours = range(last_hour + 1, last_hour + forecast_steps + 1)  # Assuming hourly data
    forecast_days = []
    for hour in forecast_hours:
        day = last_day + (hour - 1) // 24
        forecast_days.append(day)

    output_data = pd.DataFrame({
        'hour': list(forecast_hours),
        'day': forecast_days,
        'wind speed': list(forecast_values_event)
    })

    return output_data

# Generate forecasts for each event file using SARIMA
for i, file in enumerate(event_files):
    if os.path.isfile(file):
        event_data = pd.read_csv(file)
        forecasts_sarima = generate_forecasts_sarima(event_data)

        # Save forecasts to CSV file
        forecasts_sarima.to_csv(f'forecast_event_{i+1}_sarima.csv', index=False)

        # Plot the forecasted wind speeds
        plt.figure(figsize=(10, 4))
        plt.plot(forecasts_sarima['hour'], forecasts_sarima['wind speed'], label='Forecasted Wind Speed')
        plt.title(f'Forecasted Wind Speed for Event {i+1} (SARIMA)')
        plt.xlabel('Hour')
        plt.ylabel('Wind Speed')
        plt.legend()
        plt.grid(True)
        plt.show()

        # Output the new dataset to console (optional)
        print(forecasts_sarima.head())
    else:
        print(f"File not found: {file}")

